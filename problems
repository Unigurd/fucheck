How do I best compile when specifying test.fut with module Test as command-line arg?
How can I use length parameters in the type t declaration in the Test module? Can ([n]i32,[n]i32) be expressed?
How to handle generating polymorphic types?
What to do about size parameters being hidden in stuff like type t = [5]i32
How to write stuff like type t [n] = [n]i32
and use it? Like [n] (a : t n) or 'n (a : t n) or what?
Does there already exists a way to decompose an int to an array of digits?
Which organization of files would be most convenient?
How to get a C array from an opaque futhark type in Haskell
What about Storable opaque types?
any way to write generic code for a type that "implements" a module?
How do I best write generators? How can I avoid having to supply an eq?
best way to shrink arrays?
